//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentContextApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigContext {

    public ConfigEntity mapSizeConfigEntity { get { return GetGroup(ConfigMatcher.MapSizeConfig).GetSingleEntity(); } }
    public MapSizeConfigComponent mapSizeConfig { get { return mapSizeConfigEntity.mapSizeConfig; } }
    public bool hasMapSizeConfig { get { return mapSizeConfigEntity != null; } }

    public ConfigEntity SetMapSizeConfig(UnityEngine.Vector2 newMinScreenPoint, UnityEngine.Vector2 newMaxScreenPoint, float newSizeChunk) {
        if (hasMapSizeConfig) {
            throw new Entitas.EntitasException("Could not set MapSizeConfig!\n" + this + " already has an entity with MapSizeConfigComponent!",
                "You should check if the context already has a mapSizeConfigEntity before setting it or use context.ReplaceMapSizeConfig().");
        }
        var entity = CreateEntity();
        entity.AddMapSizeConfig(newMinScreenPoint, newMaxScreenPoint, newSizeChunk);
        return entity;
    }

    public void ReplaceMapSizeConfig(UnityEngine.Vector2 newMinScreenPoint, UnityEngine.Vector2 newMaxScreenPoint, float newSizeChunk) {
        var entity = mapSizeConfigEntity;
        if (entity == null) {
            entity = SetMapSizeConfig(newMinScreenPoint, newMaxScreenPoint, newSizeChunk);
        } else {
            entity.ReplaceMapSizeConfig(newMinScreenPoint, newMaxScreenPoint, newSizeChunk);
        }
    }

    public void RemoveMapSizeConfig() {
        mapSizeConfigEntity.Destroy();
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentEntityApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public partial class ConfigEntity {

    public MapSizeConfigComponent mapSizeConfig { get { return (MapSizeConfigComponent)GetComponent(ConfigComponentsLookup.MapSizeConfig); } }
    public bool hasMapSizeConfig { get { return HasComponent(ConfigComponentsLookup.MapSizeConfig); } }

    public void AddMapSizeConfig(UnityEngine.Vector2 newMinScreenPoint, UnityEngine.Vector2 newMaxScreenPoint, float newSizeChunk) {
        var index = ConfigComponentsLookup.MapSizeConfig;
        var component = (MapSizeConfigComponent)CreateComponent(index, typeof(MapSizeConfigComponent));
        component.MinScreenPoint = newMinScreenPoint;
        component.MaxScreenPoint = newMaxScreenPoint;
        component.SizeChunk = newSizeChunk;
        AddComponent(index, component);
    }

    public void ReplaceMapSizeConfig(UnityEngine.Vector2 newMinScreenPoint, UnityEngine.Vector2 newMaxScreenPoint, float newSizeChunk) {
        var index = ConfigComponentsLookup.MapSizeConfig;
        var component = (MapSizeConfigComponent)CreateComponent(index, typeof(MapSizeConfigComponent));
        component.MinScreenPoint = newMinScreenPoint;
        component.MaxScreenPoint = newMaxScreenPoint;
        component.SizeChunk = newSizeChunk;
        ReplaceComponent(index, component);
    }

    public void RemoveMapSizeConfig() {
        RemoveComponent(ConfigComponentsLookup.MapSizeConfig);
    }
}

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGeneration.Plugins.ComponentMatcherApiGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
public sealed partial class ConfigMatcher {

    static Entitas.IMatcher<ConfigEntity> _matcherMapSizeConfig;

    public static Entitas.IMatcher<ConfigEntity> MapSizeConfig {
        get {
            if (_matcherMapSizeConfig == null) {
                var matcher = (Entitas.Matcher<ConfigEntity>)Entitas.Matcher<ConfigEntity>.AllOf(ConfigComponentsLookup.MapSizeConfig);
                matcher.componentNames = ConfigComponentsLookup.componentNames;
                _matcherMapSizeConfig = matcher;
            }

            return _matcherMapSizeConfig;
        }
    }
}
